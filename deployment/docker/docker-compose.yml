version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: workflow-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-workflow_management}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./../../migrations:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: workflow-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: workflow-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-workflow_management}
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=${FLASK_ENV:-development}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - workflow-network
    volumes:
      - ./../../backend:/app/backend
      - uploaded_files:/app/uploads
    restart: unless-stopped

  # File Server (Node.js)
  file-server:
    build:
      context: ../../server
      dockerfile: ../deployment/docker/Dockerfile.fileserver
    container_name: workflow-fileserver
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-workflow_management}
    ports:
      - "${FILE_SERVER_PORT:-3001}:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - workflow-network
    volumes:
      - uploaded_files:/app/uploads
    restart: unless-stopped

  # Frontend (Development mode)
  frontend-dev:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend-dev
    container_name: workflow-frontend-dev
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - VITE_FILE_SERVER_URL=http://localhost:${FILE_SERVER_PORT:-3001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ../../src:/app/src
      - ../../public:/app/public
      - ../../index.html:/app/index.html
      - ../../package.json:/app/package.json
      - ../../vite.config.ts:/app/vite.config.ts
    networks:
      - workflow-network
    profiles:
      - development

  # Frontend (Production mode with Nginx)
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
    container_name: workflow-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - workflow-network
    profiles:
      - production

networks:
  workflow-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploaded_files:
    driver: local